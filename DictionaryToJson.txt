  private string DictionaryToJson(Dictionary<string, object> data)
    {
        StringBuilder builder = new StringBuilder("{");

        foreach (KeyValuePair<string, object> pair in data)
        {
            builder.AppendFormat("\"{0}\":", pair.Key);

            if (pair.Value is string)
            {
                builder.AppendFormat("\"{0}\",", pair.Value);
            }
            else if (pair.Value is bool)
            {
                builder.AppendFormat("{0},", pair.Value.ToString().ToLower());
            }
            else if (pair.Value is Dictionary<string, object>)
            {
                builder.AppendFormat("{0},", DictionaryToJson((Dictionary<string, object>)pair.Value));
            }
            else
            {
                builder.AppendFormat("{0},", pair.Value);
            }
        }

        if (builder[builder.Length - 1] == ',')
        {
            builder.Remove(builder.Length - 1, 1);
        }

        builder.Append("}");

        return builder.ToString();
    }
    
     private Dictionary<string, object> JsonToDictionary(string jsonString)
    {
        // Create an empty dictionary
        Dictionary<string, object> dict = new Dictionary<string, object>();

        // Parse the JSON string using the MiniJSON library
        object jsonObj = Json.Deserialize(jsonString);

        // Convert the JSON object to a dictionary
        if (jsonObj is Dictionary<string, object>)
        {
            dict = (Dictionary<string, object>)jsonObj;
            foreach (var item in dict)
            {
                Debug.Log(item.Key + "Keys");

            }
        }

        return dict;
    }
